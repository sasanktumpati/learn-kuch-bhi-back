"""simplify flashcards schema: inline outline and remove linking table

Revision ID: 0d479b277f53
Revises: b5d23ace9aec
Create Date: 2025-09-09 18:37:38.410329

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "0d479b277f53"
down_revision: Union[str, Sequence[str], None] = "b5d23ace9aec"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema with data migration (inline outline JSON and link sets)."""
    # 1) Add new columns first
    op.add_column(
        "flashcard_sets", sa.Column("multi_result_id", sa.Integer(), nullable=True)
    )
    op.add_column("flashcard_sets", sa.Column("topic_name", sa.String(), nullable=True))
    op.add_column(
        "flashcard_sets", sa.Column("subtopic_name", sa.String(), nullable=True)
    )
    op.create_index(
        op.f("ix_flashcard_sets_multi_result_id"),
        "flashcard_sets",
        ["multi_result_id"],
        unique=False,
    )
    op.create_foreign_key(
        "flashcard_sets_multi_result_id_fkey",
        "flashcard_sets",
        "multi_flashcards_results",
        ["multi_result_id"],
        ["id"],
    )
    op.add_column(
        "multi_flashcards_results",
        sa.Column("outline", sa.JSON(), nullable=False, server_default=sa.text("'{}'")),
    )

    # 2) Migrate outline JSON from topic_outlines via outline_id
    op.execute(
        """
        UPDATE multi_flashcards_results m
        SET outline = json_build_object('title', t.title, 'topics', t.topics)
        FROM topic_outlines t
        WHERE m.outline_id = t.id
        """
    )

    # 3) Link flashcard sets directly to multi results using subtopic_flashcard_sets
    op.execute(
        """
        UPDATE flashcard_sets fs
        SET multi_result_id = sfs.multi_result_id,
            topic_name = sfs.topic_name,
            subtopic_name = sfs.subtopic_name
        FROM subtopic_flashcard_sets sfs
        WHERE fs.id = sfs.flashcard_set_id
        """
    )

    # 4) Drop old FK and columns/tables
    op.drop_constraint(
        op.f("multi_flashcards_results_outline_id_fkey"),
        "multi_flashcards_results",
        type_="foreignkey",
    )
    op.drop_column("multi_flashcards_results", "outline_id")

    op.drop_index(
        op.f("ix_subtopic_flashcard_sets_created_at"),
        table_name="subtopic_flashcard_sets",
    )
    op.drop_index(
        op.f("ix_subtopic_flashcard_sets_flashcard_set_id"),
        table_name="subtopic_flashcard_sets",
    )
    op.drop_index(
        op.f("ix_subtopic_flashcard_sets_id"), table_name="subtopic_flashcard_sets"
    )
    op.drop_index(
        op.f("ix_subtopic_flashcard_sets_multi_result_id"),
        table_name="subtopic_flashcard_sets",
    )
    op.drop_table("subtopic_flashcard_sets")

    op.drop_index(op.f("ix_topic_outlines_created_at"), table_name="topic_outlines")
    op.drop_index(op.f("ix_topic_outlines_id"), table_name="topic_outlines")
    op.drop_table("topic_outlines")


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "multi_flashcards_results",
        sa.Column("outline_id", sa.INTEGER(), autoincrement=False, nullable=False),
    )
    op.create_foreign_key(
        op.f("multi_flashcards_results_outline_id_fkey"),
        "multi_flashcards_results",
        "topic_outlines",
        ["outline_id"],
        ["id"],
    )
    op.drop_column("multi_flashcards_results", "outline")
    op.drop_constraint(None, "flashcard_sets", type_="foreignkey")
    op.drop_index(
        op.f("ix_flashcard_sets_multi_result_id"), table_name="flashcard_sets"
    )
    op.drop_column("flashcard_sets", "subtopic_name")
    op.drop_column("flashcard_sets", "topic_name")
    op.drop_column("flashcard_sets", "multi_result_id")
    op.create_table(
        "topic_outlines",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('topic_outlines_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("title", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column(
            "topics",
            postgresql.JSON(astext_type=sa.Text()),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("original_prompt", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column(
            "status",
            postgresql.ENUM(
                "PENDING", "PROCESSING", "COMPLETED", "FAILED", name="generationstatus"
            ),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name="topic_outlines_user_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="topic_outlines_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_index(
        op.f("ix_topic_outlines_id"), "topic_outlines", ["id"], unique=False
    )
    op.create_index(
        op.f("ix_topic_outlines_created_at"),
        "topic_outlines",
        ["created_at"],
        unique=False,
    )
    op.create_table(
        "subtopic_flashcard_sets",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("multi_result_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "flashcard_set_id", sa.INTEGER(), autoincrement=False, nullable=False
        ),
        sa.Column("topic_name", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("subtopic_name", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["flashcard_set_id"],
            ["flashcard_sets.id"],
            name=op.f("subtopic_flashcard_sets_flashcard_set_id_fkey"),
        ),
        sa.ForeignKeyConstraint(
            ["multi_result_id"],
            ["multi_flashcards_results.id"],
            name=op.f("subtopic_flashcard_sets_multi_result_id_fkey"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("subtopic_flashcard_sets_pkey")),
        sa.UniqueConstraint(
            "multi_result_id",
            "topic_name",
            "subtopic_name",
            name=op.f("uq_multi_topic_subtopic"),
            postgresql_include=[],
            postgresql_nulls_not_distinct=False,
        ),
    )
    op.create_index(
        op.f("ix_subtopic_flashcard_sets_multi_result_id"),
        "subtopic_flashcard_sets",
        ["multi_result_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_subtopic_flashcard_sets_id"),
        "subtopic_flashcard_sets",
        ["id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_subtopic_flashcard_sets_flashcard_set_id"),
        "subtopic_flashcard_sets",
        ["flashcard_set_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_subtopic_flashcard_sets_created_at"),
        "subtopic_flashcard_sets",
        ["created_at"],
        unique=False,
    )
    # ### end Alembic commands ###
